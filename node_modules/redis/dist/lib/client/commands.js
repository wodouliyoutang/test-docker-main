"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = __importDefault(require("../cluster/commands"));
const ACL_CAT = __importStar(require("../commands/ACL_CAT"));
const ACL_DELUSER = __importStar(require("../commands/ACL_DELUSER"));
const ACL_GENPASS = __importStar(require("../commands/ACL_GENPASS"));
const ACL_GETUSER = __importStar(require("../commands/ACL_GETUSER"));
const ACL_LIST = __importStar(require("../commands/ACL_LIST"));
const ACL_LOAD = __importStar(require("../commands/ACL_LOAD"));
const ACL_LOG_RESET = __importStar(require("../commands/ACL_LOG_RESET"));
const ACL_LOG = __importStar(require("../commands/ACL_LOG"));
const ACL_SAVE = __importStar(require("../commands/ACL_SAVE"));
const ACL_SETUSER = __importStar(require("../commands/ACL_SETUSER"));
const ACL_USERS = __importStar(require("../commands/ACL_USERS"));
const ACL_WHOAMI = __importStar(require("../commands/ACL_WHOAMI"));
const ASKING = __importStar(require("../commands/ASKING"));
const AUTH = __importStar(require("../commands/AUTH"));
const BGREWRITEAOF = __importStar(require("../commands/BGREWRITEAOF"));
const BGSAVE = __importStar(require("../commands/BGSAVE"));
const CLIENT_ID = __importStar(require("../commands/CLIENT_ID"));
const CLIENT_INFO = __importStar(require("../commands/CLIENT_INFO"));
const CLUSTER_ADDSLOTS = __importStar(require("../commands/CLUSTER_ADDSLOTS"));
const CLUSTER_FLUSHSLOTS = __importStar(require("../commands/CLUSTER_FLUSHSLOTS"));
const CLUSTER_INFO = __importStar(require("../commands/CLUSTER_INFO"));
const CLUSTER_NODES = __importStar(require("../commands/CLUSTER_NODES"));
const CLUSTER_MEET = __importStar(require("../commands/CLUSTER_MEET"));
const CLUSTER_RESET = __importStar(require("../commands/CLUSTER_RESET"));
const CLUSTER_SETSLOT = __importStar(require("../commands/CLUSTER_SETSLOT"));
const CLUSTER_SLOTS = __importStar(require("../commands/CLUSTER_SLOTS"));
const COMMAND_COUNT = __importStar(require("../commands/COMMAND_COUNT"));
const COMMAND_GETKEYS = __importStar(require("../commands/COMMAND_GETKEYS"));
const COMMAND_INFO = __importStar(require("../commands/COMMAND_INFO"));
const COMMAND = __importStar(require("../commands/COMMAND"));
const CONFIG_GET = __importStar(require("../commands/CONFIG_GET"));
const CONFIG_RESETASTAT = __importStar(require("../commands/CONFIG_RESETSTAT"));
const CONFIG_REWRITE = __importStar(require("../commands/CONFIG_REWRITE"));
const CONFIG_SET = __importStar(require("../commands/CONFIG_SET"));
const DBSIZE = __importStar(require("../commands/DBSIZE"));
const DISCARD = __importStar(require("../commands/DISCARD"));
const ECHO = __importStar(require("../commands/ECHO"));
const FAILOVER = __importStar(require("../commands/FAILOVER"));
const FLUSHALL = __importStar(require("../commands/FLUSHALL"));
const FLUSHDB = __importStar(require("../commands/FLUSHDB"));
const HELLO = __importStar(require("../commands/HELLO"));
const INFO = __importStar(require("../commands/INFO"));
const KEYS = __importStar(require("../commands/KEYS"));
const LASTSAVE = __importStar(require("../commands/LASTSAVE"));
const LOLWUT = __importStar(require("../commands/LOLWUT"));
const MEMOERY_DOCTOR = __importStar(require("../commands/MEMORY_DOCTOR"));
const MEMORY_MALLOC_STATS = __importStar(require("../commands/MEMORY_MALLOC-STATS"));
const MEMORY_PURGE = __importStar(require("../commands/MEMORY_PURGE"));
const MEMORY_STATS = __importStar(require("../commands/MEMORY_STATS"));
const MEMORY_USAGE = __importStar(require("../commands/MEMORY_USAGE"));
const MODULE_LIST = __importStar(require("../commands/MODULE_LIST"));
const MODULE_LOAD = __importStar(require("../commands/MODULE_LOAD"));
const MODULE_UNLOAD = __importStar(require("../commands/MODULE_UNLOAD"));
const MOVE = __importStar(require("../commands/MOVE"));
const PING = __importStar(require("../commands/PING"));
const PUBSUB_CHANNELS = __importStar(require("../commands/PUBSUB_CHANNELS"));
const PUBSUB_NUMPAT = __importStar(require("../commands/PUBSUB_NUMPAT"));
const PUBSUB_NUMSUB = __importStar(require("../commands/PUBSUB_NUMSUB"));
const RANDOMKEY = __importStar(require("../commands/RANDOMKEY"));
const READONLY = __importStar(require("../commands/READONLY"));
const READWRITE = __importStar(require("../commands/READWRITE"));
const REPLICAOF = __importStar(require("../commands/REPLICAOF"));
const RESTORE_ASKING = __importStar(require("../commands/RESTORE-ASKING"));
const ROLE = __importStar(require("../commands/ROLE"));
const SAVE = __importStar(require("../commands/SAVE"));
const SCAN = __importStar(require("../commands/SCAN"));
const SCRIPT_DEBUG = __importStar(require("../commands/SCRIPT_DEBUG"));
const SCRIPT_EXISTS = __importStar(require("../commands/SCRIPT_EXISTS"));
const SCRIPT_FLUSH = __importStar(require("../commands/SCRIPT_FLUSH"));
const SCRIPT_KILL = __importStar(require("../commands/SCRIPT_KILL"));
const SCRIPT_LOAD = __importStar(require("../commands/SCRIPT_LOAD"));
const SHUTDOWN = __importStar(require("../commands/SHUTDOWN"));
const SWAPDB = __importStar(require("../commands/SWAPDB"));
const TIME = __importStar(require("../commands/TIME"));
const UNWATCH = __importStar(require("../commands/UNWATCH"));
const WAIT = __importStar(require("../commands/WAIT"));
exports.default = {
    ...commands_1.default,
    ACL_CAT,
    aclCat: ACL_CAT,
    ACL_DELUSER,
    aclDelUser: ACL_DELUSER,
    ACL_GENPASS,
    aclGenPass: ACL_GENPASS,
    ACL_GETUSER,
    aclGetUser: ACL_GETUSER,
    ACL_LIST,
    aclList: ACL_LIST,
    ACL_LOAD,
    aclLoad: ACL_LOAD,
    ACL_LOG_RESET,
    aclLogReset: ACL_LOG_RESET,
    ACL_LOG,
    aclLog: ACL_LOG,
    ACL_SAVE,
    aclSave: ACL_SAVE,
    ACL_SETUSER,
    aclSetUser: ACL_SETUSER,
    ACL_USERS,
    aclUsers: ACL_USERS,
    ACL_WHOAMI,
    aclWhoAmI: ACL_WHOAMI,
    ASKING,
    asking: ASKING,
    AUTH,
    auth: AUTH,
    BGREWRITEAOF,
    bgRewriteAof: BGREWRITEAOF,
    BGSAVE,
    bgSave: BGSAVE,
    CLIENT_ID,
    clientId: CLIENT_ID,
    CLIENT_INFO,
    clientInfo: CLIENT_INFO,
    CLUSTER_ADDSLOTS,
    clusterAddSlots: CLUSTER_ADDSLOTS,
    CLUSTER_FLUSHSLOTS,
    clusterFlushSlots: CLUSTER_FLUSHSLOTS,
    CLUSTER_INFO,
    clusterInfo: CLUSTER_INFO,
    CLUSTER_NODES,
    clusterNodes: CLUSTER_NODES,
    CLUSTER_MEET,
    clusterMeet: CLUSTER_MEET,
    CLUSTER_RESET,
    clusterReset: CLUSTER_RESET,
    CLUSTER_SETSLOT,
    clusterSetSlot: CLUSTER_SETSLOT,
    CLUSTER_SLOTS,
    clusterSlots: CLUSTER_SLOTS,
    COMMAND_COUNT,
    commandCount: COMMAND_COUNT,
    COMMAND_GETKEYS,
    commandGetKeys: COMMAND_GETKEYS,
    COMMAND_INFO,
    commandInfo: COMMAND_INFO,
    COMMAND,
    command: COMMAND,
    CONFIG_GET,
    configGet: CONFIG_GET,
    CONFIG_RESETASTAT,
    configResetStat: CONFIG_RESETASTAT,
    CONFIG_REWRITE,
    configRewrite: CONFIG_REWRITE,
    CONFIG_SET,
    configSet: CONFIG_SET,
    DBSIZE,
    dbSize: DBSIZE,
    DISCARD,
    discard: DISCARD,
    ECHO,
    echo: ECHO,
    FAILOVER,
    failover: FAILOVER,
    FLUSHALL,
    flushAll: FLUSHALL,
    FLUSHDB,
    flushDb: FLUSHDB,
    HELLO,
    hello: HELLO,
    INFO,
    info: INFO,
    KEYS,
    keys: KEYS,
    LASTSAVE,
    lastSave: LASTSAVE,
    LOLWUT,
    lolwut: LOLWUT,
    MEMOERY_DOCTOR,
    memoryDoctor: MEMOERY_DOCTOR,
    'MEMORY_MALLOC-STATS': MEMORY_MALLOC_STATS,
    memoryMallocStats: MEMORY_MALLOC_STATS,
    MEMORY_PURGE,
    memoryPurge: MEMORY_PURGE,
    MEMORY_STATS,
    memoryStats: MEMORY_STATS,
    MEMORY_USAGE,
    memoryUsage: MEMORY_USAGE,
    MODULE_LIST,
    moduleList: MODULE_LIST,
    MODULE_LOAD,
    moduleLoad: MODULE_LOAD,
    MODULE_UNLOAD,
    moduleUnload: MODULE_UNLOAD,
    MOVE,
    move: MOVE,
    PING,
    ping: PING,
    PUBSUB_CHANNELS,
    pubSubChannels: PUBSUB_CHANNELS,
    PUBSUB_NUMPAT,
    pubSubNumPat: PUBSUB_NUMPAT,
    PUBSUB_NUMSUB,
    pubSubNumSub: PUBSUB_NUMSUB,
    RANDOMKEY,
    randomKey: RANDOMKEY,
    READONLY,
    readonly: READONLY,
    READWRITE,
    readwrite: READWRITE,
    REPLICAOF,
    replicaOf: REPLICAOF,
    'RESTORE-ASKING': RESTORE_ASKING,
    restoreAsking: RESTORE_ASKING,
    ROLE,
    role: ROLE,
    SAVE,
    save: SAVE,
    SCAN,
    scan: SCAN,
    SCRIPT_DEBUG,
    scriptDebug: SCRIPT_DEBUG,
    SCRIPT_EXISTS,
    scriptExists: SCRIPT_EXISTS,
    SCRIPT_FLUSH,
    scriptFlush: SCRIPT_FLUSH,
    SCRIPT_KILL,
    scriptKill: SCRIPT_KILL,
    SCRIPT_LOAD,
    scriptLoad: SCRIPT_LOAD,
    SHUTDOWN,
    shutdown: SHUTDOWN,
    SWAPDB,
    swapDb: SWAPDB,
    TIME,
    time: TIME,
    UNWATCH,
    unwatch: UNWATCH,
    WAIT,
    wait: WAIT,
};
