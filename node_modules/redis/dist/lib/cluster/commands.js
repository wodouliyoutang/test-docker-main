"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const APPEND = __importStar(require("../commands/APPEND"));
const BITCOUNT = __importStar(require("../commands/BITCOUNT"));
const BITFIELD = __importStar(require("../commands/BITFIELD"));
const BITOP = __importStar(require("../commands/BITOP"));
const BITPOS = __importStar(require("../commands/BITPOS"));
const BLMOVE = __importStar(require("../commands/BLMOVE"));
const BLPOP = __importStar(require("../commands/BLPOP"));
const BRPOP = __importStar(require("../commands/BRPOP"));
const BRPOPLPUSH = __importStar(require("../commands/BRPOPLPUSH"));
const BZPOPMAX = __importStar(require("../commands/BZPOPMAX"));
const BZPOPMIN = __importStar(require("../commands/BZPOPMIN"));
const COPY = __importStar(require("../commands/COPY"));
const DECR = __importStar(require("../commands/DECR"));
const DECRBY = __importStar(require("../commands/DECRBY"));
const DEL = __importStar(require("../commands/DEL"));
const DUMP = __importStar(require("../commands/DUMP"));
const EVAL = __importStar(require("../commands/EVAL"));
const EVALSHA = __importStar(require("../commands/EVALSHA"));
const EXISTS = __importStar(require("../commands/EXISTS"));
const EXPIRE = __importStar(require("../commands/EXPIRE"));
const EXPIREAT = __importStar(require("../commands/EXPIREAT"));
const GEOADD = __importStar(require("../commands/GEOADD"));
const GEODIST = __importStar(require("../commands/GEODIST"));
const GEOHASH = __importStar(require("../commands/GEOHASH"));
const GEOPOS = __importStar(require("../commands/GEOPOS"));
const GEOSEARCH_WITH = __importStar(require("../commands/GEOSEARCH_WITH"));
const GEOSEARCH = __importStar(require("../commands/GEOSEARCH"));
const GEOSEARCHSTORE = __importStar(require("../commands/GEOSEARCHSTORE"));
const GET_BUFFER = __importStar(require("../commands/GET_BUFFER"));
const GET = __importStar(require("../commands/GET"));
const GETBIT = __importStar(require("../commands/GETBIT"));
const GETDEL = __importStar(require("../commands/GETDEL"));
const GETEX = __importStar(require("../commands/GETEX"));
const GETRANGE = __importStar(require("../commands/GETRANGE"));
const GETSET = __importStar(require("../commands/GETSET"));
const HDEL = __importStar(require("../commands/HDEL"));
const HEXISTS = __importStar(require("../commands/HEXISTS"));
const HGET = __importStar(require("../commands/HGET"));
const HGETALL = __importStar(require("../commands/HGETALL"));
const HINCRBY = __importStar(require("../commands/HINCRBY"));
const HINCRBYFLOAT = __importStar(require("../commands/HINCRBYFLOAT"));
const HKEYS = __importStar(require("../commands/HKEYS"));
const HLEN = __importStar(require("../commands/HLEN"));
const HMGET = __importStar(require("../commands/HMGET"));
const HRANDFIELD_COUNT_WITHVALUES = __importStar(require("../commands/HRANDFIELD_COUNT_WITHVALUES"));
const HRANDFIELD_COUNT = __importStar(require("../commands/HRANDFIELD_COUNT"));
const HRANDFIELD = __importStar(require("../commands/HRANDFIELD"));
const HSCAN = __importStar(require("../commands/HSCAN"));
const HSET = __importStar(require("../commands/HSET"));
const HSETNX = __importStar(require("../commands/HSETNX"));
const HSTRLEN = __importStar(require("../commands/HSTRLEN"));
const HVALS = __importStar(require("../commands/HVALS"));
const INCR = __importStar(require("../commands/INCR"));
const INCRBY = __importStar(require("../commands/INCRBY"));
const INCRBYFLOAT = __importStar(require("../commands/INCRBYFLOAT"));
const LINDEX = __importStar(require("../commands/LINDEX"));
const LINSERT = __importStar(require("../commands/LINSERT"));
const LLEN = __importStar(require("../commands/LLEN"));
const LMOVE = __importStar(require("../commands/LMOVE"));
const LPOP_COUNT = __importStar(require("../commands/LPOP_COUNT"));
const LPOP = __importStar(require("../commands/LPOP"));
const LPOS_COUNT = __importStar(require("../commands/LPOS_COUNT"));
const LPOS = __importStar(require("../commands/LPOS"));
const LPUSH = __importStar(require("../commands/LPUSH"));
const LPUSHX = __importStar(require("../commands/LPUSHX"));
const LRANGE = __importStar(require("../commands/LRANGE"));
const LREM = __importStar(require("../commands/LREM"));
const LSET = __importStar(require("../commands/LSET"));
const LTRIM = __importStar(require("../commands/LTRIM"));
const MGET = __importStar(require("../commands/MGET"));
const MIGRATE = __importStar(require("../commands/MIGRATE"));
const MSET = __importStar(require("../commands/MSET"));
const MSETNX = __importStar(require("../commands/MSETNX"));
const PERSIST = __importStar(require("../commands/PERSIST"));
const PEXPIRE = __importStar(require("../commands/PEXPIRE"));
const PEXPIREAT = __importStar(require("../commands/PEXPIREAT"));
const PFADD = __importStar(require("../commands/PFADD"));
const PFCOUNT = __importStar(require("../commands/PFCOUNT"));
const PFMERGE = __importStar(require("../commands/PFMERGE"));
const PSETEX = __importStar(require("../commands/PSETEX"));
const PTTL = __importStar(require("../commands/PTTL"));
const PUBLISH = __importStar(require("../commands/PUBLISH"));
const RENAME = __importStar(require("../commands/RENAME"));
const RENAMENX = __importStar(require("../commands/RENAMENX"));
const RPOP_COUNT = __importStar(require("../commands/RPOP_COUNT"));
const RPOP = __importStar(require("../commands/RPOP"));
const RPOPLPUSH = __importStar(require("../commands/RPOPLPUSH"));
const RPUSH = __importStar(require("../commands/RPUSH"));
const RPUSHX = __importStar(require("../commands/RPUSHX"));
const SADD = __importStar(require("../commands/SADD"));
const SCARD = __importStar(require("../commands/SCARD"));
const SDIFF = __importStar(require("../commands/SDIFF"));
const SDIFFSTORE = __importStar(require("../commands/SDIFFSTORE"));
const SET = __importStar(require("../commands/SET"));
const SETBIT = __importStar(require("../commands/SETBIT"));
const SETEX = __importStar(require("../commands/SETEX"));
const SETNX = __importStar(require("../commands/SETNX"));
const SETRANGE = __importStar(require("../commands/SETRANGE"));
const SINTER = __importStar(require("../commands/SINTER"));
const SINTERSTORE = __importStar(require("../commands/SINTERSTORE"));
const SISMEMBER = __importStar(require("../commands/SISMEMBER"));
const SMEMBERS = __importStar(require("../commands/SMEMBERS"));
const SMISMEMBER = __importStar(require("../commands/SMISMEMBER"));
const SMOVE = __importStar(require("../commands/SMOVE"));
const SORT = __importStar(require("../commands/SORT"));
const SPOP = __importStar(require("../commands/SPOP"));
const SRANDMEMBER_COUNT = __importStar(require("../commands/SRANDMEMBER_COUNT"));
const SRANDMEMBER = __importStar(require("../commands/SRANDMEMBER"));
const SREM = __importStar(require("../commands/SREM"));
const SSCAN = __importStar(require("../commands/SSCAN"));
const STRLEN = __importStar(require("../commands/STRLEN"));
const SUNION = __importStar(require("../commands/SUNION"));
const SUNIONSTORE = __importStar(require("../commands/SUNIONSTORE"));
const TOUCH = __importStar(require("../commands/TOUCH"));
const TTL = __importStar(require("../commands/TTL"));
const TYPE = __importStar(require("../commands/TYPE"));
const UNLINK = __importStar(require("../commands/UNLINK"));
const WATCH = __importStar(require("../commands/WATCH"));
const XACK = __importStar(require("../commands/XACK"));
const XADD = __importStar(require("../commands/XADD"));
const XAUTOCLAIM_JUSTID = __importStar(require("../commands/XAUTOCLAIM_JUSTID"));
const XAUTOCLAIM = __importStar(require("../commands/XAUTOCLAIM"));
const XCLAIM = __importStar(require("../commands/XCLAIM"));
const XCLAIM_JUSTID = __importStar(require("../commands/XCLAIM_JUSTID"));
const XDEL = __importStar(require("../commands/XDEL"));
const XGROUP_CREATE = __importStar(require("../commands/XGROUP_CREATE"));
const XGROUP_CREATECONSUMER = __importStar(require("../commands/XGROUP_CREATECONSUMER"));
const XGROUP_DELCONSUMER = __importStar(require("../commands/XGROUP_DELCONSUMER"));
const XGROUP_DESTROY = __importStar(require("../commands/XGROUP_DESTROY"));
const XGROUP_SETID = __importStar(require("../commands/XGROUP_SETID"));
const XINFO_CONSUMERS = __importStar(require("../commands/XINFO_CONSUMERS"));
const XINFO_GROUPS = __importStar(require("../commands/XINFO_GROUPS"));
const XINFO_STREAM = __importStar(require("../commands/XINFO_STREAM"));
const XLEN = __importStar(require("../commands/XLEN"));
const XPENDING_RANGE = __importStar(require("../commands/XPENDING_RANGE"));
const XPENDING = __importStar(require("../commands/XPENDING"));
const XRANGE = __importStar(require("../commands/XRANGE"));
const XREAD = __importStar(require("../commands/XREAD"));
const XREADGROUP = __importStar(require("../commands/XREADGROUP"));
const XREVRANGE = __importStar(require("../commands/XREVRANGE"));
const XTRIM = __importStar(require("../commands/XTRIM"));
const ZADD = __importStar(require("../commands/ZADD"));
const ZCARD = __importStar(require("../commands/ZCARD"));
const ZCOUNT = __importStar(require("../commands/ZCOUNT"));
const ZDIFF_WITHSCORES = __importStar(require("../commands/ZDIFF_WITHSCORES"));
const ZDIFF = __importStar(require("../commands/ZDIFF"));
const ZDIFFSTORE = __importStar(require("../commands/ZDIFFSTORE"));
const ZINCRBY = __importStar(require("../commands/ZINCRBY"));
const ZINTER_WITHSCORES = __importStar(require("../commands/ZINTER_WITHSCORES"));
const ZINTER = __importStar(require("../commands/ZINTER"));
const ZINTERSTORE = __importStar(require("../commands/ZINTERSTORE"));
const ZLEXCOUNT = __importStar(require("../commands/ZLEXCOUNT"));
const ZMSCORE = __importStar(require("../commands/ZMSCORE"));
const ZPOPMAX_COUNT = __importStar(require("../commands/ZPOPMAX_COUNT"));
const ZPOPMAX = __importStar(require("../commands/ZPOPMAX"));
const ZPOPMIN_COUNT = __importStar(require("../commands/ZPOPMIN_COUNT"));
const ZPOPMIN = __importStar(require("../commands/ZPOPMIN"));
const ZRANDMEMBER_COUNT_WITHSCORES = __importStar(require("../commands/ZRANDMEMBER_COUNT_WITHSCORES"));
const ZRANDMEMBER_COUNT = __importStar(require("../commands/ZRANDMEMBER_COUNT"));
const ZRANDMEMBER = __importStar(require("../commands/ZRANDMEMBER"));
const ZRANGE_WITHSCORES = __importStar(require("../commands/ZRANGE_WITHSCORES"));
const ZRANGE = __importStar(require("../commands/ZRANGE"));
const ZRANGEBYLEX = __importStar(require("../commands/ZRANGEBYLEX"));
const ZRANGEBYSCORE_WITHSCORES = __importStar(require("../commands/ZRANGEBYSCORE_WITHSCORES"));
const ZRANGEBYSCORE = __importStar(require("../commands/ZRANGEBYSCORE"));
const ZRANGESTORE = __importStar(require("../commands/ZRANGESTORE"));
const ZRANK = __importStar(require("../commands/ZRANK"));
const ZREM = __importStar(require("../commands/ZREM"));
const ZREMRANGEBYLEX = __importStar(require("../commands/ZREMRANGEBYLEX"));
const ZREMRANGEBYRANK = __importStar(require("../commands/ZREMRANGEBYRANK"));
const ZREMRANGEBYSCORE = __importStar(require("../commands/ZREMRANGEBYSCORE"));
const ZREVRANK = __importStar(require("../commands/ZREVRANK"));
const ZSCAN = __importStar(require("../commands/ZSCAN"));
const ZSCORE = __importStar(require("../commands/ZSCORE"));
const ZUNION_WITHSCORES = __importStar(require("../commands/ZUNION_WITHSCORES"));
const ZUNION = __importStar(require("../commands/ZUNION"));
const ZUNIONSTORE = __importStar(require("../commands/ZUNIONSTORE"));
exports.default = {
    APPEND,
    append: APPEND,
    BITCOUNT,
    bitCount: BITCOUNT,
    BITFIELD,
    bitField: BITFIELD,
    BITOP,
    bitOp: BITOP,
    BITPOS,
    bitPos: BITPOS,
    BLMOVE,
    blMove: BLMOVE,
    BLPOP,
    blPop: BLPOP,
    BRPOP,
    brPop: BRPOP,
    BRPOPLPUSH,
    brPopLPush: BRPOPLPUSH,
    BZPOPMAX,
    bzPopMax: BZPOPMAX,
    BZPOPMIN,
    bzPopMin: BZPOPMIN,
    COPY,
    copy: COPY,
    DECR,
    decr: DECR,
    DECRBY,
    decrBy: DECRBY,
    DEL,
    del: DEL,
    DUMP,
    dump: DUMP,
    EVAL,
    eval: EVAL,
    EVALSHA,
    evalSha: EVALSHA,
    EXISTS,
    exists: EXISTS,
    EXPIRE,
    expire: EXPIRE,
    EXPIREAT,
    expireAt: EXPIREAT,
    GEOADD,
    geoAdd: GEOADD,
    GEODIST,
    geoDist: GEODIST,
    GEOHASH,
    geoHash: GEOHASH,
    GEOPOS,
    geoPos: GEOPOS,
    GEOSEARCH_WITH,
    geoSearchWith: GEOSEARCH_WITH,
    GEOSEARCH,
    geoSearch: GEOSEARCH,
    GEOSEARCHSTORE,
    geoSearchStore: GEOSEARCHSTORE,
    GET_BUFFER,
    getBuffer: GET_BUFFER,
    GET,
    get: GET,
    GETBIT,
    getBit: GETBIT,
    GETDEL,
    getDel: GETDEL,
    GETEX,
    getEx: GETEX,
    GETRANGE,
    getRange: GETRANGE,
    GETSET,
    getSet: GETSET,
    HDEL,
    hDel: HDEL,
    HEXISTS,
    hExists: HEXISTS,
    HGET,
    hGet: HGET,
    HGETALL,
    hGetAll: HGETALL,
    HINCRBY,
    hIncrBy: HINCRBY,
    HINCRBYFLOAT,
    hIncrByFloat: HINCRBYFLOAT,
    HKEYS,
    hKeys: HKEYS,
    HLEN,
    hLen: HLEN,
    HMGET,
    hmGet: HMGET,
    HRANDFIELD_COUNT_WITHVALUES,
    hRandFieldCountWithValues: HRANDFIELD_COUNT_WITHVALUES,
    HRANDFIELD_COUNT,
    hRandFieldCount: HRANDFIELD_COUNT,
    HRANDFIELD,
    hRandField: HRANDFIELD,
    HSCAN,
    hScan: HSCAN,
    HSET,
    hSet: HSET,
    HSETNX,
    hSetNX: HSETNX,
    HSTRLEN,
    hStrLen: HSTRLEN,
    HVALS,
    hVals: HVALS,
    INCR,
    incr: INCR,
    INCRBY,
    incrBy: INCRBY,
    INCRBYFLOAT,
    incrByFloat: INCRBYFLOAT,
    LINDEX,
    lIndex: LINDEX,
    LINSERT,
    lInsert: LINSERT,
    LLEN,
    lLen: LLEN,
    LMOVE,
    lMove: LMOVE,
    LPOP_COUNT,
    lPopCount: LPOP_COUNT,
    LPOP,
    lPop: LPOP,
    LPOS_COUNT,
    lPosCount: LPOS_COUNT,
    LPOS,
    lPos: LPOS,
    LPUSH,
    lPush: LPUSH,
    LPUSHX,
    lPushX: LPUSHX,
    LRANGE,
    lRange: LRANGE,
    LREM,
    lRem: LREM,
    LSET,
    lSet: LSET,
    LTRIM,
    lTrim: LTRIM,
    MGET,
    mGet: MGET,
    MIGRATE,
    migrate: MIGRATE,
    MSET,
    mSet: MSET,
    MSETNX,
    mSetNX: MSETNX,
    PERSIST,
    persist: PERSIST,
    PEXPIRE,
    pExpire: PEXPIRE,
    PEXPIREAT,
    pExpireAt: PEXPIREAT,
    PFADD,
    pfAdd: PFADD,
    PFCOUNT,
    pfCount: PFCOUNT,
    PFMERGE,
    pfMerge: PFMERGE,
    PSETEX,
    pSetEx: PSETEX,
    PTTL,
    pTTL: PTTL,
    PUBLISH,
    publish: PUBLISH,
    RENAME,
    rename: RENAME,
    RENAMENX,
    renameNX: RENAMENX,
    RPOP_COUNT,
    rPopCount: RPOP_COUNT,
    RPOP,
    rPop: RPOP,
    RPOPLPUSH,
    rPopLPush: RPOPLPUSH,
    RPUSH,
    rPush: RPUSH,
    RPUSHX,
    rPushX: RPUSHX,
    SADD,
    sAdd: SADD,
    SCARD,
    sCard: SCARD,
    SDIFF,
    sDiff: SDIFF,
    SDIFFSTORE,
    sDiffStore: SDIFFSTORE,
    SINTER,
    sInter: SINTER,
    SINTERSTORE,
    sInterStore: SINTERSTORE,
    SET,
    set: SET,
    SETBIT,
    setBit: SETBIT,
    SETEX,
    setEx: SETEX,
    SETNX,
    setNX: SETNX,
    SETRANGE,
    setRange: SETRANGE,
    SISMEMBER,
    sIsMember: SISMEMBER,
    SMEMBERS,
    sMembers: SMEMBERS,
    SMISMEMBER,
    smIsMember: SMISMEMBER,
    SMOVE,
    sMove: SMOVE,
    SORT,
    sort: SORT,
    SPOP,
    sPop: SPOP,
    SRANDMEMBER_COUNT,
    sRandMemberCount: SRANDMEMBER_COUNT,
    SRANDMEMBER,
    sRandMember: SRANDMEMBER,
    SREM,
    sRem: SREM,
    SSCAN,
    sScan: SSCAN,
    STRLEN,
    strLen: STRLEN,
    SUNION,
    sUnion: SUNION,
    SUNIONSTORE,
    sUnionStore: SUNIONSTORE,
    TOUCH,
    touch: TOUCH,
    TTL,
    ttl: TTL,
    TYPE,
    type: TYPE,
    UNLINK,
    unlink: UNLINK,
    WATCH,
    watch: WATCH,
    XACK,
    xAck: XACK,
    XADD,
    xAdd: XADD,
    XAUTOCLAIM_JUSTID,
    xAutoClaimJustId: XAUTOCLAIM_JUSTID,
    XAUTOCLAIM,
    xAutoClaim: XAUTOCLAIM,
    XCLAIM,
    xClaim: XCLAIM,
    XCLAIM_JUSTID,
    xClaimJustId: XCLAIM_JUSTID,
    XDEL,
    xDel: XDEL,
    XGROUP_CREATE,
    xGroupCreate: XGROUP_CREATE,
    XGROUP_CREATECONSUMER,
    xGroupCreateConsumer: XGROUP_CREATECONSUMER,
    XGROUP_DELCONSUMER,
    xGroupDelConsumer: XGROUP_DELCONSUMER,
    XGROUP_DESTROY,
    xGroupDestroy: XGROUP_DESTROY,
    XGROUP_SETID,
    xGroupSetId: XGROUP_SETID,
    XINFO_CONSUMERS,
    xInfoConsumers: XINFO_CONSUMERS,
    XINFO_GROUPS,
    xInfoGroups: XINFO_GROUPS,
    XINFO_STREAM,
    xInfoStream: XINFO_STREAM,
    XLEN,
    xLen: XLEN,
    XPENDING_RANGE,
    xPendingRange: XPENDING_RANGE,
    XPENDING,
    xPending: XPENDING,
    XRANGE,
    xRange: XRANGE,
    XREAD,
    xRead: XREAD,
    XREADGROUP,
    xReadGroup: XREADGROUP,
    XREVRANGE,
    xRevRange: XREVRANGE,
    XTRIM,
    xTrim: XTRIM,
    ZADD,
    zAdd: ZADD,
    ZCARD,
    zCard: ZCARD,
    ZCOUNT,
    zCount: ZCOUNT,
    ZDIFF_WITHSCORES,
    zDiffWithScores: ZDIFF_WITHSCORES,
    ZDIFF,
    zDiff: ZDIFF,
    ZDIFFSTORE,
    zDiffStore: ZDIFFSTORE,
    ZINCRBY,
    zIncrBy: ZINCRBY,
    ZINTER_WITHSCORES,
    zInterWithScores: ZINTER_WITHSCORES,
    ZINTER,
    zInter: ZINTER,
    ZINTERSTORE,
    zInterStore: ZINTERSTORE,
    ZLEXCOUNT,
    zLexCount: ZLEXCOUNT,
    ZMSCORE,
    zmScore: ZMSCORE,
    ZPOPMAX_COUNT,
    zPopMaxCount: ZPOPMAX_COUNT,
    ZPOPMAX,
    zPopMax: ZPOPMAX,
    ZPOPMIN_COUNT,
    zPopMinCount: ZPOPMIN_COUNT,
    ZPOPMIN,
    zPopMin: ZPOPMIN,
    ZRANDMEMBER_COUNT_WITHSCORES,
    zRandMemberCountWithScores: ZRANDMEMBER_COUNT_WITHSCORES,
    ZRANDMEMBER_COUNT,
    zRandMemberCount: ZRANDMEMBER_COUNT,
    ZRANDMEMBER,
    zRandMember: ZRANDMEMBER,
    ZRANGE_WITHSCORES,
    zRangeWithScores: ZRANGE_WITHSCORES,
    ZRANGE,
    zRange: ZRANGE,
    ZRANGEBYLEX,
    zRangeByLex: ZRANGEBYLEX,
    ZRANGEBYSCORE_WITHSCORES,
    zRangeByScoreWithScores: ZRANGEBYSCORE_WITHSCORES,
    ZRANGEBYSCORE,
    zRangeByScore: ZRANGEBYSCORE,
    ZRANGESTORE,
    zRangeStore: ZRANGESTORE,
    ZRANK,
    zRank: ZRANK,
    ZREM,
    zRem: ZREM,
    ZREMRANGEBYLEX,
    zRemRangeByLex: ZREMRANGEBYLEX,
    ZREMRANGEBYRANK,
    zRemRangeByRank: ZREMRANGEBYRANK,
    ZREMRANGEBYSCORE,
    zRemRangeByScore: ZREMRANGEBYSCORE,
    ZREVRANK,
    zRevRank: ZREVRANK,
    ZSCAN,
    zScan: ZSCAN,
    ZSCORE,
    zScore: ZSCORE,
    ZUNION_WITHSCORES,
    zUnionWithScores: ZUNION_WITHSCORES,
    ZUNION,
    zUnion: ZUNION,
    ZUNIONSTORE,
    zUnionStore: ZUNIONSTORE
};
